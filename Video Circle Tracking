#Import the tools needed for the rest of the program
import cv2 as cv
import numpy as np


# number of frames to skip
numFrameToSave = 15


# define the list of boundaries for color detection
# ([Blue,Green,Red],[Blue,Green,Red])
boundaries = [
    ([26 , 61 , 147] , [46 , 81 , 167]),             # Color 1-Rose
#    ([153, 63, 153], [173, 83, 173]),               # Color 2-Purple
#    ([72 , 58 , 46] , [92 , 78 , 66]),             # Color 3-Light Grey
#    ([0, 0, 0], [10, 10, 10]),                    # Color 4-Black
#    ([165, 217, 229], [185, 237, 249]),             # Color 5-Light Yellow
#    ([19, 219, 171], [39, 239, 191]),               # Color 6-Lime
#    ([67, 167, 25], [87, 187, 45]),                 # Color 7-Green
#    ([0 , 123 , 143] , [20 , 143 , 163]),                # Color 8-Yellow
#    ([28, 117, 245], [48, 137, 255]),               # Color 9-Orange
#    ([222, 153, 0], [242, 173, 10]),                # Color 10-Turquoise
#    ([194, 61, 53], [214, 81, 73]),                 # Color 11-Indigo
#    ([19 , 55 , 149] , [39 , 75 , 169])                  # Color 12-Red
]

#Names of the Colors
colors = ['Rose', 'Purple', 'Light Grey', 'Light Yellow', 'Lime', 'Green', 'Yellow', 'Orange', 'Turqouise', 'Indigo', 'Red']

# creates a list of 12 lists, one per circle
centerPoints = [[] for i in range(2)]            


#Imports the Video and reads the file 
vidcap = cv.VideoCapture('stationaryTest1.mp4')
success,image = vidcap.read()
count = 0;

print("I am in success")
while success:                              # check success here might break your program
  success,image = vidcap.read()             #success might be false and image might be None
  
  #check success here
  if not success:
    break

  # on every numFrameToSave
  if (count % numFrameToSave ==0):
    cv.imwrite("frame.jpg", image)          #Writes the current frame to frame.jpg
    image = cv.imread("frame.jpg")          #Reads the currenent frame------May be able to skip this step
    circleNum = 0

    # loop over the boundaries
    for (lower, upper) in boundaries:
        # create NumPy arrays from the boundaries
        lower = np.array(lower, dtype="uint8")
        upper = np.array(upper, dtype="uint8")
            
        # find the colors within the specified boundaries and apply
        # the mask
        mask = cv.inRange(image, lower, upper)
        output = cv.bitwise_and(image, image, mask=mask)
            
        # cv.imshow("images",output)
        # #Shows what the output of the boundary is
        cv.imwrite('temp.png', output)          # Saves the output as a temp.png
        filename = "temp.png"                   # Loads the temp.png as 'filename' to be used for Hough
            
        # Hough transform
        src = cv.imread(filename, cv.IMREAD_COLOR)  # Reads the file name and stores it as src
        gray = cv.cvtColor(src, cv.COLOR_BGR2GRAY)
        gray = cv.medianBlur(gray, 5)
        circles = cv.HoughCircles(gray, cv.HOUGH_GRADIENT, 1, 20, param1=100, param2=15,
                                  minRadius=20, maxRadius=100)

        circles = np.uint16(np.around(circles))
        
        for i in circles[0, :]:                 #What is this going to do if it detects multiple circles?
            radius = i[2]
                
            # finds center and stores the value
            center = (i[0], i[1])
            centerPoints[circleNum].append(center)
                        
            # numbers circles
            circleNum = circleNum + 1
            
        #Prints the color name and their center points
        for j in range(0, 11):
            print(colors[j])
            print(centerPoints[j])
            print('\n')
            j = j + 1
        
  if cv.waitKey(10) == 27:
      break
  count += 1
