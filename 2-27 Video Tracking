#Import the tools needed for the rest of the program
import cv2 as cv
import numpy as np


# number of frames to skip
numFrameToSave = 20


# define the list of boundaries for color detection
# ([Blue,Green,Red],[Blue,Green,Red])
boundaries = [
#([108 , 95 , 141] , [138 , 125 , 171]),
#([74 , 18 , 69] , [104 , 48 , 99]),
#([63 , 51 , 41] , [93 , 81 , 71]),
#([92 , 122 , 127] , [122 , 152 , 157]),
#([12 , 14 , 139] , [42 , 44 , 169]),
#([18 , 62 , 0] , [48 , 92 , 25]),
#([0 , 119 , 139] , [26 , 149 , 169]),
#([17 , 53 , 147] , [47 , 83 , 177]),
#([128 , 56 , 0] , [158 , 86 , 26]),
#([95 , 22 , 0] , [125 , 52 , 24]),
#([0 , 108 , 70] , [27 , 138 , 100])
([146 , 129 , 186] , [176 , 159 , 216]),
]

#Names of the Colors
colors = ['Rose', 'Purple', 'Light Grey', 'Light Yellow', 'Red', 'Green', 'Yellow', 'Orange', 'Turqouise', 'Indigo', 'Lime']

# creates a list of 12 lists, one per circle
centerPoints = [[] for i in range(12)]            


#Imports the Video and reads the file 
vidcap = cv.VideoCapture('MovingTest1Circle.mov')
success,image = vidcap.read()
count = 0;

print("I am in success")
while success:                              # check success here might break your program
  success,image = vidcap.read()             #success might be false and image might be None
  
  #check success here
  if not success:
    break

  # on every numFrameToSave
  if (count % numFrameToSave == 0):
    cv.imwrite("frame.jpg", image)          #Writes the current frame to frame.jpg
    image = cv.imread("frame.jpg")          #Reads the currenent frame------May be able to skip this step
    circleNum = 0
    print('\n')
    print('Frame Number:', count)
    print('-----------------------')
    
  # allows a frame number to be saved in case there is something fishy going on
    if count == 280:
        cv.imwrite("TroubleShootFrame.jpg",image)

    # loop over the boundaries
    for (lower, upper) in boundaries:
        # create NumPy arrays from the boundaries
        lower = np.array(lower, dtype="uint8")
        upper = np.array(upper, dtype="uint8")
            
        # find the colors within the specified boundaries and apply
        # the mask
        mask = cv.inRange(image, lower, upper)
        output = cv.bitwise_and(image, image, mask=mask)
            
        # cv.imshow("images",output)
        # #Shows what the output of the boundary is
        cv.imwrite('temp.png', output)          # Saves the output as a temp.png
        filename = "temp.png"                   # Loads the temp.png as 'filename' to be used for Hough
            
        # Hough transform
        src = cv.imread(filename, cv.IMREAD_COLOR)  # Reads the file name and stores it as src in Color
        gray = cv.cvtColor(src, cv.COLOR_BGR2GRAY)  # Converts the src to a gray scale picture for the Hough Transform
        gray = cv.medianBlur(gray, 5)
        circles = cv.HoughCircles(gray, cv.HOUGH_GRADIENT, 1, 10000, param1=200, param2=15,
                                  minRadius=20, maxRadius=2000)

        if circles is not None: 
            circles = np.uint16(np.around(circles))
        # Converts the output of Hough Transform into the data we want
            holder = circles[0,:]                               #Stores circles in a placeholding variable        
            xcenter = holder[:,0];                         # The x-center
            ycenter = holder[:,1];                         # The y-center
            radius = holder[:,2];                          # The radius (Not sure why, but why not)
            center = [xcenter,ycenter];                         
            centerPoints[circleNum].append(center);
            
            print(colors[circleNum],'\t', )
            print(xcenter,ycenter)
            print('Radius: ', radius)
            print('Circles Found: ',len(holder[:,0]))
        else:                                                                   #If it is unable to find any circles 
            print('No circles found!')
        

        circleNum = circleNum + 1
               
  if cv.waitKey(10) == 27:
      break
  count += 1
