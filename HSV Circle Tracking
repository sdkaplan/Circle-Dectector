# import the necessary packages
import numpy as np
import argparse
import imutils
import cv2
import math


# given an array of positions at a given moment in time, return an array of the relative distances between them
def getRelPos(positions):
    # positions is a list of 12 tuples that are the positions at the given time

    rel_distance = [[] for i in positions]
    # print(relDistance)

    count = 0
    for pos in positions:
        # The position of the main circle
        x = pos[0]
        y = pos[1]

        for compare in positions:
            # the position of the coord comparing too
            xtemp = compare[0]
            ytemp = compare[1]

            xdist = x - xtemp
            ydist = y - ytemp
            dist = math.sqrt(float(xdist) ** 2 + float(ydist) ** 2)
            dist = round(dist, 2)
            rel_distance[count].append(dist)  # units: pixels, change to cm or mm later
        count = count + 1
    # print(relDistance)
    return rel_distance


def main():

    conversion = 1080 / 20  # PIXELS / UNITS    eg [pixels /  cm]

    # construct the argument parse and parse the arguments
    ap = argparse.ArgumentParser()
    ap.add_argument("-v", "--video",
                    help="path to the (optional) video file")
    ap.add_argument("-b", "--buffer", type=int, default=64,
                    help="max buffer size")
    args = vars(ap.parse_args())

    # define the lower and upper boundaries of the colors in the HSV color space
    lower = {'dark pink': (137, 91, 0), 'green': (43, 56, 132), 'blue': (105, 56, 75), 'yellow': (17, 72, 190),
             'orange': (0, 125, 189), 'brown': (0, 82, 47), 'light pink': (132, 14, 132)}  # assign new item lower['blue'] = (93, 10, 0)

    upper = {'dark pink': (191, 178, 221), 'green': (102, 255, 255), 'blue': (134, 255, 255), 'yellow': (56, 144, 226),
             'orange': (34, 243, 235), 'brown': (62, 142, 58), 'light pink': (191, 95, 255)}

    # define standard colors for circle around the object
    colors = {'dark pink': (0, 0, 255), 'green': (0, 255, 0), 'blue': (255, 0, 0), 'yellow': (0, 255, 217),
              'orange': (0, 140, 255), 'brown': (255, 192, 203), 'light pink': (255, 192, 203)}

    # centerPoints = [[] for i in range(12)]
    centerPoints = {'red': [] }
        # , 'green': [], 'blue': [], 'yellow': [], 'orange': [], 'purple': [], 'pink': []}

    # pts = deque(maxlen=args["buffer"])

    # if a video path was not supplied, grab the reference
    # to the webcam
    if not args.get("video", False):
        camera = cv2.VideoCapture(1)  # IMPORTANT: 0 for default webcam, 1 for usb webcam
        print("video received")

    # otherwise, grab a reference to the video file
    # else:
    #     camera = cv2.VideoCapture(args["video"])
    # keep looping
    while True:
        # grab the current frame
        (grabbed, frame) = camera.read()
        # if we are viewing a video and we did not grab a frame,
        # then we have reached the end of the video
        if not grabbed:
            break

        # IP webcam image stream
        # URL = 'http://10.254.254.102:8080/shot.jpg'
        # urllib.urlretrieve(URL, 'shot1.jpg')
        # frame = cv2.imread('shot1.jpg')

        # resize the frame, blur it, and convert it to the HSV
        # color space
        frame = imutils.resize(frame, width=600)

        blurred = cv2.GaussianBlur(frame, (11, 11), 0)
        hsv = cv2.cvtColor(blurred, cv2.COLOR_BGR2HSV)
        # for each color in dictionary check object in frame
        for key, value in upper.items():
            # construct a mask for the color from dictionary`1, then perform
            # a series of dilations and erosions to remove any small
            # blobs left in the mask
            kernel = np.ones((9, 9), np.uint8)
            mask = cv2.inRange(hsv, lower[key], upper[key])
            mask = cv2.morphologyEx(mask, cv2.MORPH_OPEN, kernel)
            mask = cv2.morphologyEx(mask, cv2.MORPH_CLOSE, kernel)

            # find contours in the mask and initialize the current
            # (x, y) center of the ball
            cnts = cv2.findContours(mask.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)[-2]
            center = None
            # cnts = cv2.HoughCircles(mask.copy(), cv2.HOUGH_GRADIENT, 1, 150, param1=190, param2=15, minRadius=200, maxRadius=250)

            # only proceed if at least one contour was found
            if len(cnts) > 0:
                # find the largest contour in the mask, then use
                # it to compute the minimum enclosing circle and
                # centroid
                c = max(cnts, key=cv2.contourArea)
                ((x, y), radius) = cv2.minEnclosingCircle(c)
                M = cv2.moments(c)
                center = (int(M["m10"] / M["m00"]), int(M["m01"] / M["m00"]))
                # print(radius)

                # only proceed if the radius meets a minimum size. Correct this value for your object's size
                if radius > 20 and radius < 35:
                    # draw the circle and centroid on the frame,
                    # then update the list of tracked points
                    cv2.circle(frame, (int(x), int(y)), int(radius), colors[key], 2)
                    cv2.putText(frame, key + " ball", (int(x - radius), int(y - radius)), cv2.FONT_HERSHEY_SIMPLEX, 0.6,
                                colors[key], 2)

                    xcenter = int(x) / conversion  # The x-center in [cm]
                    ycenter = int(y) / conversion  # The y-center in [cm]
                    radius_con = radius / conversion  # The radius (Not sure why, but why not) in [cm]
                    #centerPoints[key].append(center)
                    #print(centerPoints)

                    # # Calculates the speed of the object over the last time interval
                    # if len(centerPoints[0]) >= 1:
                    #     previousLocation = (centerPoints[circleNum])[indexcounter - 1]
                    #     xprevious = previousLocation[0]
                    #     yprevious = previousLocation[1]
                    #     distance = math.sqrt(
                    #         (xcenter - xprevious) ** 2 + (ycenter - yprevious) ** 2)
                    #     # Distance the circle traveled in [cm]
                    #     interval = 1
                    #     speed = distance / interval

                # show the frame to our screen
                cv2.imshow("Frame", frame)
                # cv2.imshow("Mask", mask)

            key = cv2.waitKey(1) & 0xFF
            # if the 'q' key is pressed, stop the loop
            if key == ord("q"):
                break

    # cleanup the camera and close any open windows
    camera.release()
    cv2.destroyAllWindows()


if __name__ == "__main__":
    main()

